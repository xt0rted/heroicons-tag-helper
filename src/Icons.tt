<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#
    var dataFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "../data.json");
    var icons = JsonConvert.DeserializeObject<Dictionary<string, IconDetails>>(File.ReadAllText(dataFile)).OrderBy(m => m.Key).Select(m => m.Value);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#= System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") #>
{
    using System;

    public enum IconSymbol
    {
<#
    PushIndent("        ");

    foreach (var icon in icons)
    {
        WriteLine("/// <summary>");
        WriteLine("/// {0}", icon.Id);
        WriteLine("/// </summary>");
        WriteLine(icon.Name + ",");
        WriteLine(null);
    }

    ClearIndent();
#>
    }

    public static class IconList
    {
        public static Icon Outline(IconSymbol symbol)
        {
            switch (symbol)
            {
<#
    PushIndent("                ");

    foreach (var icon in icons)
    {
        WriteLine("case IconSymbol." + icon.Name + ":");
        WriteLine("    return new Icon");
        WriteLine("    {");
        WriteLine("        Path = \"{0}\",", icon.Outline.Path.Replace("\"", "\\\""));
        WriteLine("        Width = {0:N0},", icon.Outline.Width);
        WriteLine("        Height = {0:N0},", icon.Outline.Height);
        WriteLine("    };");
        WriteLine(null);
    }

    ClearIndent();
#>
                default:
                    throw new ArgumentOutOfRangeException(nameof(symbol), symbol, "Unsupported icon name");
            }
        }

        public static Icon Solid(IconSymbol symbol)
        {
            switch (symbol)
            {
<#
    PushIndent("                ");

    foreach (var icon in icons)
    {
        WriteLine("case IconSymbol." + icon.Name + ":");
        WriteLine("    return new Icon");
        WriteLine("    {");
        WriteLine("        Path = \"{0}\",", icon.Solid.Path.Replace("\"", "\\\""));
        WriteLine("        Width = {0:N0},", icon.Solid.Width);
        WriteLine("        Height = {0:N0},", icon.Solid.Height);
        WriteLine("    };");
        WriteLine(null);
    }

    ClearIndent();
#>
                default:
                    throw new ArgumentOutOfRangeException(nameof(symbol), symbol, "Unsupported icon name");
            }
        }
    }

    public class Icon
    {
        public string Path { get; set; }
        public int Height { get; set; }
        public int Width { get; set; }
    }
}
<#+
    private class IconDetails
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public IconVariant Outline { get; set; }
        public IconVariant Solid { get; set; }
    }

    private class IconVariant
    {
        public int Height { get; set; }
        public int Width { get; set; }
        public string Path { get; set; }
    }
#>
